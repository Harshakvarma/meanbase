/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__(1);
	
	__webpack_require__(2);
	
	__webpack_require__(3);

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	angular.module("meanbaseApp").run(["$templateCache", function ($templateCache) {
	  $templateCache.put("extensions/gallery/gallery.html", "<div class=\"gallery-container\">\n  <carousel interval=\"interval\">\n    <slide ng-repeat=\"image in images\" active=\"image.active\">\n      <img ng-src=\"{{image.modifiedurl}}\" style=\"margin:auto;\" fallback-src=\"http://placehold.it/900x300\">\n      <div class=\"carousel-caption\">\n        <h4>Slide {{$index}}</h4>\n        <p>{{image.alt}}</p>\n      </div>\n    </slide>\n  </carousel>\n  <div ng-if=\"editMode\" class=\"gallery-config\">\n    <button class=\"btn btn-block btn-primary gallery-find-images-button\" find-images-modal find-images-config=\"findImagesConfig\" ng-if=\"editMode\">Select Images</button>\n    <div class=\"form-group\">\n      <div class=\"input-group\">\n        <div class=\"input-group-addon\">\n          <span>Gallery Name</span>\n        </div>\n        <input type=\"text\" class=\"form-control\" placeholder=\"Gallery Slug\" ng-model=\"extension.config.slug\"> \n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"input-group\">\n        <div class=\"input-group-addon\">\n          <span>Interval</span>\n        </div>\n        <input type=\"text\" class=\"form-control\" placeholder=\"3000\" ng-model=\"extension.config.interval\">\n      </div>\n    </div>\n    <!-- <div find-images-for=\"{{extension.config.slug}}\" multiple=\"true\" class=\"gallery-find-images\"></div> -->\n    <!-- <div find-images-modal find-images-config=\"config\" multiple=\"true\" class=\"gallery-find-images\"></div> -->\n  </div>\n</div>");
	  $templateCache.put("extensions/gallery/index.html", "<gallery></gallery>");
	}]);

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	// This directive uses the slug passed in to get the appropriate images and display them in a slider
	
	angular.module('extensions').directive('gallery', function (endpoints, $rootScope, api) {
	  return {
	    templateUrl: 'extensions/gallery/gallery.html',
	    restrict: 'EA',
	    replace: true,
	    link: function (scope, element, attrs) {
	      var areChanges;
	      var imagesSnapshot;
	
	      if (!scope.extension.config.slug) {
	        scope.extension.config.slug = 'gallery-1';
	      }
	      if (!scope.extension.config.interval) {
	        scope.extension.config.interval = 3000;
	      }
	      if (!scope.extension.data) {
	        scope.extension.data = {};
	      }
	      if (!scope.images) {
	        scope.images = [{
	          "url": "http://placehold.it/900x300",
	          "attribute": "Placehold It",
	          "alt": "This gallery has no images",
	          "modifiedurl": "http://placehold.it/900x300"
	        }];
	      }
	
	      // Use all images that have this gallery slug title
	      if (scope.extension.config.slug) {
	        api.media.find({ galleries: scope.extension.config.slug }).success(function (response) {
	          scope.images = response || {};
	
	          if (scope.images.length < 1) {
	            scope.images = [{
	              "url": "http://placehold.it/900x300",
	              "attribute": "Placehold It",
	              "alt": "This gallery has no images",
	              "modifiedurl": "http://placehold.it/900x300"
	            }];
	          } else {
	            for (var i = 0; i < scope.images.length; i++) {
	              scope.images[i].modifiedurl = scope.images[i].url + 'large.jpg';
	            };
	          }
	
	          scope.findImagesConfig.alreadySelected = scope.images;
	          imagesSnapshot = angular.copy(scope.images);
	        });
	      }
	
	      scope.findImagesConfig = {
	        multiple: true,
	        allOperations: false,
	        gallerySlug: scope.extension.config.slug,
	        alreadySelected: scope.images
	      };
	
	      scope.findImagesConfig.gallerySlug = scope.extension.config.slug;
	
	      scope.$watch(function () {
	        return scope.extension.config.slug;
	      }, function (nv, ov) {
	        if (nv === ov) {
	          return false;
	        }
	        scope.findImagesConfig.gallerySlug = nv;
	      });
	
	      imagesSnapshot = angular.copy(scope.images);
	
	      // If images where chosen that share the name of this gallery slug then retrieve those selected images
	      scope.$onRootScope('cms.choseImages', function (e, gallery) {
	        if (scope.extension.config.slug === gallery.gallerySlug) {
	          for (var i = 0; i < gallery.images.length; i++) {
	            gallery.images[i].modifiedurl = gallery.images[i].large;
	          };
	          scope.images = angular.copy(gallery.images);
	          scope.findImagesConfig.alreadySelected = scope.images;
	          areChanges = true;
	        }
	      });
	
	      // When the save button is hit on the cms headbar have the main.controller publishGallerySelection save the slugs to the appropriate images
	      scope.$onRootScope('cms.saveEdits', function () {
	        if (areChanges) {
	          imagesSnapshot = angular.copy(scope.images);
	          $rootScope.publishGallerySelection(scope.extension.config.slug, scope.images);
	          areChanges = false;
	        }
	      });
	
	      // If the discard button is hit on the cms headbar have reset the gallery images to the snapshot
	      scope.$onRootScope('cms.discardEdits', function () {
	        scope.images = imagesSnapshot;
	        scope.findImagesConfig.alreadySelected = imagesSnapshot;
	        areChanges = false;
	      });
	    }
	  };
	});

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(4);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(6)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./gallery.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./gallery.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(5)();
	// imports
	
	
	// module
	exports.push([module.id, ".gallery-container {\n\tposition: relative;\n}\n\n.gallery-find-images {\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n}\n\n.gallery-find-images-button {\n\tmargin-bottom: 1em;\n}\n\n.gallery-config {\n\tmargin: 0 0 1em;\n\tpadding: 1em;\n\tbackground-color: #ECF0F1;\n\tborder-radius: 4px;\n}\n\n.carousel {\n\tmargin-top: 1em;\n}\n", ""]);
	
	// exports


/***/ },
/* 5 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=extension.min.js.map