{"version":3,"sources":["webpack:///webpack/bootstrap 0f204217c4f0c204d06b","webpack:///./public/extensions/mb-panel/index.js","webpack:///./public/extensions/mb-panel/mb-panel-extension.html","webpack:///./public/extensions/mb-panel/mb-panel.html","webpack:///./public/extensions/mb-panel/mb-panel.directive.js"],"names":["angular","module","directive","api","$rootScope","$timeout","templateUrl","require","replace","link","scope","element","attrs","event","response","alreadyHasData","custom","update","belongsTo","listItem","label","key","value","data","create","enabled","permission","items","err","console","log","saveEdits","alreadyHasAutoSaveData","extensionData","find","currentUser","publishListener","$onRootScope","publishChangesListener","$destroy"],"mappings":"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","file":"extension.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 0f204217c4f0c204d06b\n **/","// inject jade\nimport \"./mb-panel-extension.html\";\nimport \"./mb-panel.html\";\n// end inject jade\n\n// inject js\nimport \"./mb-panel.directive.js\";\n// end inject js\n\n// inject stylus\n// end inject stylus\n\n\n\n/** WEBPACK FOOTER **\n ** ./public/extensions/mb-panel/index.js\n **/","var path = 'extensions/mb-panel/mb-panel-extension.html';\nvar html = \"<mb-panel></mb-panel>\\n\";\nwindow.angular.module('meanbaseApp').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/extensions/mb-panel/mb-panel-extension.html\n ** module id = 1\n ** module chunks = 0\n **/","var path = 'extensions/mb-panel/mb-panel.html';\nvar html = \"<div class=\\\"panel panel-default\\\">\\n\\t<div class=\\\"panel-heading\\\">\\n    <div mb-edit ng-model=\\\"data.headingText\\\" bind-options=\\\"editorSingleLine\\\" ng-change=\\\"autoSaveEdits()\\\"></div>\\n\\t</div>\\n\\t<div class=\\\"panel-body\\\">\\n\\t\\t<div mb-edit ng-model=\\\"data.bodyText\\\" bind-options=\\\"editorOptions\\\" ng-change=\\\"autoSaveEdits()\\\"></div>\\n\\t</div>\\n</div>\\n\";\nwindow.angular.module('meanbaseApp').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/extensions/mb-panel/mb-panel.html\n ** module id = 2\n ** module chunks = 0\n **/","angular.module('meanbaseApp').directive('mbPanel', (api, $rootScope, $timeout) => ({\n  templateUrl: require('./mb-panel.html'),\n  replace: true,\n  link: async (scope, element, attrs) => {\n\n    scope.data = {}\n    let alreadyHasData = false\n    let alreadyHasAutoSaveData = false;\n\n    (async () => {\n      try {\n        let extensionData = await api.custom.find({belongsTo: scope.listItem.label, key: scope.listItem.key})\n        extensionData = extensionData[0]\n        if(extensionData) {\n          alreadyHasData = true\n          scope.data = extensionData.value\n        }\n      } catch(err) {\n        console.log(`Error fetching ${scope.listItem.key} data`, err);\n      }\n    })();\n\n    scope.data = scope.listItem.data\n\n\n    if(!$rootScope.currentUser) { return false }\n\n    // $timeout(async () => {\n    //   api.staging.find({belongsTo: scope.listItem.label, key: scope.listItem.key}).then(function(stagingData) {\n    //     stagingData = stagingData[0]\n    //     if(stagingData) {\n    //       if($rootScope.editMode) {\n    //         scope.data = stagingData.data\n    //       }\n    //       alreadyHasAutoSaveData = true\n    //     }\n    //   });\n    // });\n\n    async function saveEdits(event) {\n      try {\n        let response\n        if(alreadyHasData) {\n          response = await api.custom.update({belongsTo: scope.listItem.label, key: scope.listItem.key}, {value: scope.data})\n        } else {\n          alreadyHasData = true\n          response = await api.custom.create({belongsTo: scope.listItem.label, key: scope.listItem.key, value: scope.data, enabled: true, permission: 'editContent'})\n\n        }\n        scope.data = response.value\n\n        scope.listItem.data = { items: [] }\n\n      } catch(err) {\n        console.log('Error saving extension data ', err);\n      }\n\n    }\n    // async function saveEdits(event) {\n    //   try {\n    //     let response\n    //     if(alreadyHasData) {\n    //       response = await api.custom.update({belongsTo: scope.listItem.label, key: scope.listItem.key}, {value: scope.data})\n    //     } else {\n    //       alreadyHasData = true\n    //       response = await api.custom.create({belongsTo: scope.listItem.label, key: scope.listItem.key, value: scope.data, enabled: true, permission: 'editContent'})\n    //\n    //     }\n    //     scope.data = response.value\n    //\n    //     removeAutoSaveData()\n    //\n    //   } catch(err) {\n    //     console.log('Error saving extension data ', err);\n    //   }\n    //\n    // }\n    //\n    // async function removeAutoSaveData() {\n    //   try {\n    //     await api.staging.delete({belongsTo: scope.listItem.label, key: scope.listItem.key})\n    //     alreadyHasAutoSaveData = false\n    //   } catch(err) {\n    //     console.log(`Error deleting ${scope.listItem.label} autosave data`, err);\n    //   }\n    // }\n    //\n    // async function fetchAutoSaveData() {\n    //   try {\n    //     let data = await api.staging.find({belongsTo: scope.listItem.label, key: scope.listItem.key})\n    //     data = data[0]\n    //     if(data) {\n    //       scope.data = data.data\n    //       alreadyHasAutoSaveData = true\n    //     }\n    //   } catch(err) {\n    //     console.log(`Error deleting ${scope.listItem.label} autosave data`, err);\n    //   }\n    // }\n    //\n    //\n    // scope.autoSaveEdits = async function(event) {\n    //   try {\n    //     let response\n    //     if(alreadyHasAutoSaveData) {\n    //       response = await api.staging.update({belongsTo: scope.listItem.label, key: scope.listItem.key}, {data: scope.data})\n    //     } else {\n    //       alreadyHasAutoSaveData = true\n    //       response = await api.staging.create({belongsTo: scope.listItem.label, key: scope.listItem.key, data: scope.data, enabled: true, permission: 'editContent'})\n    //     }\n    //   } catch(err) {\n    //     console.log('Error saving extension data ', err);\n    //   }\n    //\n    // }\n\n    // let directiveWatcher = scope.$watch(scope.data, _.debounce(function(newValue, oldValue) {\n    //   if(typeof newValue !== oldValue) {\n    //     console.log(\"newValue\", newValue);\n    //     $rootScope.$emit('cms.autoSave')\n    //     scope.autoSavingInProgress = true\n    //     $timeout(function() {\n    //       scope.autoSavingInProgress = false\n    //     }, 1000);\n    //   }\n    // }, 100), true)\n\n    let publishListener = scope.$onRootScope('cms.publish', saveEdits)\n    let publishChangesListener = scope.$onRootScope('cms.publishChanges', saveEdits)\n    // scope.$onRootScope('cms.autoSave', _.debounce(autoSaveEdits, 100))\n    // let resetDraftListener = scope.$onRootScope('cms.resetDraft', removeAutoSaveData)\n    // let pullAutoSaveListener = scope.$onRootScope('cms.pullAutoSaveData', fetchAutoSaveData)\n\n    scope.$destroy(function() {\n      publishListener()\n      publishChangesListener()\n      // resetDraftListener()\n      // pullAutoSaveListener()\n    })\n\n  }\n}))\n\n\n\n/** WEBPACK FOOTER **\n ** ./public/extensions/mb-panel/mb-panel.directive.js\n **/"],"sourceRoot":""}