/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__(1);
	
	__webpack_require__(2);
	
	__webpack_require__(3);

/***/ },
/* 1 */
/***/ function(module, exports) {

	var path = 'extensions/mb-panel/mb-panel-extension.html';
	var html = "<mb-panel></mb-panel>\n";
	window.angular.module('meanbaseApp').run(['$templateCache', function(c) { c.put(path, html) }]);
	module.exports = path;

/***/ },
/* 2 */
/***/ function(module, exports) {

	var path = 'extensions/mb-panel/mb-panel.html';
	var html = "<div class=\"panel panel-default\">\n\t<div class=\"panel-heading\">\n    <div mb-edit ng-model=\"data.headingText\" bind-options=\"editorSingleLine\" ng-change=\"autoSaveEdits()\"></div>\n\t</div>\n\t<div class=\"panel-body\">\n\t\t<div mb-edit ng-model=\"data.bodyText\" bind-options=\"editorOptions\" ng-change=\"autoSaveEdits()\"></div>\n\t</div>\n</div>\n";
	window.angular.module('meanbaseApp').run(['$templateCache', function(c) { c.put(path, html) }]);
	module.exports = path;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }
	
	angular.module('meanbaseApp').directive('mbPanel', ['api', '$rootScope', '$timeout', (api, $rootScope, $timeout) => ({
	  templateUrl: __webpack_require__(2),
	  replace: true,
	  link: (() => {
	    var _ref = _asyncToGenerator(function* (scope, element, attrs) {
	
	      // $timeout(async () => {
	      //   api.staging.find({belongsTo: scope.listItem.label, key: scope.listItem.key}).then(function(stagingData) {
	      //     stagingData = stagingData[0]
	      //     if(stagingData) {
	      //       if($rootScope.editMode) {
	      //         scope.data = stagingData.data
	      //       }
	      //       alreadyHasAutoSaveData = true
	      //     }
	      //   });
	      // });
	
	      let saveEdits = (() => {
	        var _ref3 = _asyncToGenerator(function* (event) {
	          try {
	            let response;
	            if (alreadyHasData) {
	              response = yield api.custom.update({ belongsTo: scope.listItem.label, key: scope.listItem.key }, { value: scope.data });
	            } else {
	              alreadyHasData = true;
	              response = yield api.custom.create({ belongsTo: scope.listItem.label, key: scope.listItem.key, value: scope.data, enabled: true, permission: 'editContent' });
	            }
	            scope.data = response.value;
	
	            scope.listItem.data = { items: [] };
	          } catch (err) {
	            console.log('Error saving extension data ', err);
	          }
	        });
	
	        return function saveEdits(_x4) {
	          return _ref3.apply(this, arguments);
	        };
	      })();
	      // async function saveEdits(event) {
	      //   try {
	      //     let response
	      //     if(alreadyHasData) {
	      //       response = await api.custom.update({belongsTo: scope.listItem.label, key: scope.listItem.key}, {value: scope.data})
	      //     } else {
	      //       alreadyHasData = true
	      //       response = await api.custom.create({belongsTo: scope.listItem.label, key: scope.listItem.key, value: scope.data, enabled: true, permission: 'editContent'})
	      //
	      //     }
	      //     scope.data = response.value
	      //
	      //     removeAutoSaveData()
	      //
	      //   } catch(err) {
	      //     console.log('Error saving extension data ', err);
	      //   }
	      //
	      // }
	      //
	      // async function removeAutoSaveData() {
	      //   try {
	      //     await api.staging.delete({belongsTo: scope.listItem.label, key: scope.listItem.key})
	      //     alreadyHasAutoSaveData = false
	      //   } catch(err) {
	      //     console.log(`Error deleting ${scope.listItem.label} autosave data`, err);
	      //   }
	      // }
	      //
	      // async function fetchAutoSaveData() {
	      //   try {
	      //     let data = await api.staging.find({belongsTo: scope.listItem.label, key: scope.listItem.key})
	      //     data = data[0]
	      //     if(data) {
	      //       scope.data = data.data
	      //       alreadyHasAutoSaveData = true
	      //     }
	      //   } catch(err) {
	      //     console.log(`Error deleting ${scope.listItem.label} autosave data`, err);
	      //   }
	      // }
	      //
	      //
	      // scope.autoSaveEdits = async function(event) {
	      //   try {
	      //     let response
	      //     if(alreadyHasAutoSaveData) {
	      //       response = await api.staging.update({belongsTo: scope.listItem.label, key: scope.listItem.key}, {data: scope.data})
	      //     } else {
	      //       alreadyHasAutoSaveData = true
	      //       response = await api.staging.create({belongsTo: scope.listItem.label, key: scope.listItem.key, data: scope.data, enabled: true, permission: 'editContent'})
	      //     }
	      //   } catch(err) {
	      //     console.log('Error saving extension data ', err);
	      //   }
	      //
	      // }
	
	      // let directiveWatcher = scope.$watch(scope.data, _.debounce(function(newValue, oldValue) {
	      //   if(typeof newValue !== oldValue) {
	      //     console.log("newValue", newValue);
	      //     $rootScope.$emit('cms.autoSave')
	      //     scope.autoSavingInProgress = true
	      //     $timeout(function() {
	      //       scope.autoSavingInProgress = false
	      //     }, 1000);
	      //   }
	      // }, 100), true)
	
	      scope.data = {};
	      let alreadyHasData = false;
	      let alreadyHasAutoSaveData = false;
	
	      _asyncToGenerator(function* () {
	        try {
	          let extensionData = yield api.custom.find({ belongsTo: scope.listItem.label, key: scope.listItem.key });
	          extensionData = extensionData[0];
	          if (extensionData) {
	            alreadyHasData = true;
	            scope.data = extensionData.value;
	          }
	        } catch (err) {
	          console.log(`Error fetching ${ scope.listItem.key } data`, err);
	        }
	      })();
	
	      scope.data = scope.listItem.data;
	
	      if (!$rootScope.currentUser) {
	        return false;
	      }let publishListener = scope.$onRootScope('cms.publish', saveEdits);
	      let publishChangesListener = scope.$onRootScope('cms.publishChanges', saveEdits);
	      // scope.$onRootScope('cms.autoSave', _.debounce(autoSaveEdits, 100))
	      // let resetDraftListener = scope.$onRootScope('cms.resetDraft', removeAutoSaveData)
	      // let pullAutoSaveListener = scope.$onRootScope('cms.pullAutoSaveData', fetchAutoSaveData)
	
	      scope.$destroy(function () {
	        publishListener();
	        publishChangesListener();
	        // resetDraftListener()
	        // pullAutoSaveListener()
	      });
	    });
	
	    return function link(_x, _x2, _x3) {
	      return _ref.apply(this, arguments);
	    };
	  })()
	})]);

/***/ }
/******/ ]);
//# sourceMappingURL=extension.min.js.map